---
openapi: 3.1.0
components:
  schemas:
    Car:
      description: Entity that represents a car.
      type: object
      properties:
        id:
          type: integer
          format: int64
        vin:
          type: string
          description: VIN number
          examples:
          - WVGEF9BP4DD085048
          pattern: \S
        make:
          type: string
          description: Manufacturer
          examples:
          - BMW
          pattern: \S
        model:
          type: string
          description: Model Number
          examples:
          - 330ix
          pattern: \S
        year:
          type: integer
          format: int32
          description: Year of manufacture
          examples:
          - 1974
          minimum: 1960
        color:
          type: string
          description: HTML color of the car
          examples:
          - 891d4c
          pattern: \S
        price:
          type: number
          description: Price
          examples:
          - 9999.99
          minimum: 0.00
        modifiedTime:
          description: Modified time of the record
          type: string
          $ref: "#/components/schemas/Instant"
      required:
      - vin
      - make
      - model
      - year
      - color
      - price
    FilterConstraint:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
    Instant:
      type: string
      format: date-time
      examples:
      - 2022-03-10T16:15:50Z
    MultiFilterMeta:
      type: object
      properties:
        value:
          description: Value to filter this column by
        matchMode:
          type: string
          description: "Filter match mode e.g. equals, notEquals, contains, notContains,\
            \ gt, gte, lt, lte"
          examples:
          - equals
        operator:
          type: string
          description: Filter operator either 'and' or 'or'
        constraints:
          type: array
          items:
            $ref: "#/components/schemas/FilterConstraint"
          description: List of filter constraints for this filter
    MultiSortMeta:
      type: object
      properties:
        field:
          type: string
          description: Sort field for this multiple sort
          examples:
          - lastName
        order:
          type: integer
          format: int32
          description: "Sort order for this field either -1 desc, 0 none, 1 asc"
          examples:
          - 1
    QueryRequest:
      description: "Represents a PrimeReact query request from the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        first:
          type: integer
          format: int32
          description: First record
          examples:
          - 1
        rows:
          type: integer
          format: int32
          description: Number of rows
          examples:
          - 10
        page:
          type: integer
          format: int32
          description: Page number
          examples:
          - 1
        sortField:
          type: string
          description: Sort field if single field sorting
          examples:
          - firstName
        sortOrder:
          type: integer
          format: int32
          description: "Sort order if single field sorting either -1 desc, 0 none,\
            \ 1 asc"
          examples:
          - 1
        multiSortMeta:
          type: array
          items:
            $ref: "#/components/schemas/MultiSortMeta"
          description: Multiple sorting list of columns to sort and in which order
        filters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/MultiFilterMeta"
          description: Map of columns being filtered and their filter criteria
    QueryResponse:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items: {}
          description: "Records for this set of pagination, sorting, filtering."
    QueryResponseCar:
      description: "Represents a PrimeReact query response to the UI for a complex\
        \ datatable with multiple sorts, multiple filters, and pagination."
      type: object
      properties:
        totalRecords:
          type: integer
          format: int64
          description: Total records available by this query criteria
          examples:
          - 4128
        records:
          type: array
          items:
            $ref: "#/components/schemas/Car"
          description: "Records for this set of pagination, sorting, filtering."
    LoggerLevel:
      title: LoggerLevel
      type: string
      enum:
      - "OFF"
      - SEVERE
      - ERROR
      - FATAL
      - WARNING
      - WARN
      - INFO
      - DEBUG
      - TRACE
      - CONFIG
      - FINE
      - FINER
      - FINEST
      - ALL
    LoggerInfo:
      title: LoggerInfo
      type: object
      properties:
        name:
          type: string
        effectiveLevel:
          $ref: "#/components/schemas/LoggerLevel"
        configuredLevel:
          $ref: "#/components/schemas/LoggerLevel"
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - UP
          - DOWN
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"
    HealthCheck:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum:
          - UP
          - DOWN
        data:
          type:
          - object
          - "null"
tags:
- name: Car Resource
  description: CRUD operations for the Car entity.
paths:
  /entity/cars:
    get:
      tags:
      - Car Resource
      parameters:
      - name: request
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResponseCar"
      summary: List
    post:
      tags:
      - Car Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: OK
      summary: Create
  /entity/cars/manufacturers:
    get:
      tags:
      - Car Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      summary: Get Manufacturers
  /entity/cars/{id}:
    put:
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Car"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
      summary: Update
    get:
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
      summary: Get Single
    delete:
      tags:
      - Car Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
          minimum: 0
      responses:
        "200":
          description: OK
      summary: Delete
  /q/logging-manager:
    summary: "Return info on all loggers, or a specific logger"
    description: Logging Manager Loggers
    get:
      operationId: logging_manager_get_all
      summary: Information on Logger(s)
      description: Get information on all loggers or a specific logger.
      tags:
      - logging-manager
      parameters:
      - name: loggerName
        in: query
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoggerInfo"
        "404":
          description: Not Found
    post:
      operationId: logging_manager_update
      summary: Update log level
      description: Update a log level for a certain logger
      tags:
      - logging-manager
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                loggerName: {}
                loggerLevel:
                  $ref: "#/components/schemas/LoggerLevel"
      responses:
        "201":
          description: Created
  /q/logging-manager/levels:
    description: All available levels
    summary: Return all levels that is available
    get:
      description: This returns all possible log levels
      operationId: logging_manager_levels
      tags:
      - logging-manager
      summary: Get all available levels
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LoggerLevel"
  /q/health:
    description: MicroProfile Health Endpoint
    summary: MicroProfile Health provides a way for your application to distribute
      information about its healthiness state to state whether or not it is able to
      function properly
    get:
      operationId: microprofile_health_root
      description: Check the health of the application
      tags:
      - MicroProfile Health
      summary: "An aggregated view of the Liveness, Readiness and Startup of this\
        \ application"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/live:
    description: MicroProfile Health - Liveness Endpoint
    summary: Liveness checks are utilized to tell whether the application should be
      restarted
    get:
      operationId: microprofile_health_liveness
      description: Check the liveness of the application
      tags:
      - MicroProfile Health
      summary: The Liveness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/ready:
    description: MicroProfile Health - Readiness Endpoint
    summary: Readiness checks are used to tell whether the application is able to
      process requests
    get:
      operationId: microprofile_health_readiness
      description: Check the readiness of the application
      tags:
      - MicroProfile Health
      summary: The Readiness check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
  /q/health/started:
    description: MicroProfile Health - Startup Endpoint
    summary: Startup checks are an used to tell when the application has started
    get:
      operationId: microprofile_health_startup
      description: Check the startup of the application
      tags:
      - MicroProfile Health
      summary: The Startup check of this application
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "503":
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"
info:
  title: Quarkus PrimeReact Monorepo
  version: 1.0.0
  description: Quarkus monorepo demonstrating Panache REST server with PrimeReact
    UI client
  contact:
    name: Melloware
    email: mellowaredev@gmail.com
    url: https://melloware.com
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
